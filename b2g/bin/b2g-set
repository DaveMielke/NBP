#!/bin/bash

settingsDatabase="/data/data/com.android.providers.settings/databases/settings.db"

declare -A settingTable=(
   ["country"]="property persist.sys.country"
   ["language"]="property persist.sys.language"

   ["accessibility"]="database accessibility_enabled secure"
   ["foreign"]="database install_non_market_apps secure"
   ["nolock"]="database lockscreen.disabled secure"

   ["timeout"]="database screen_off_timeout system"

   ["brltty"]="accessibility org.a11y.brltty.android.BrailleService org.a11y.brltty.android"
   ["spiel"]="accessibility info.spielproject.spiel.SpielService info.spielproject.spiel"
   ["talkback"]="accessibility .TalkBackService com.google.android.marvin.talkback"
)

programName="${0##*/}"
programMessage() {
   local message="${1}"

   echo >&2 "${programName}: ${message}"
}

syntaxError() {
   local message="${1}"

   programMessage "${message}"
   exit 2
}

execute() {
   adb shell "${@}"
}

sqlite3() {
   local command="${1}"

   execute sqlite3 "${settingsDatabase}" "${command}"
}

getValue() {
   local table="${1}"
   local property="${2}"

   sqlite3 "select value from ${table} where name=\"${property}\""
}

setValue() {
   local table="${1}"
   local property="${2}"
   local value="${3}"

   sqlite3 "update ${table} set value="\"${value}\"" where name=\"${property}\""
}

showSetting_database() {
   getValue "${settingContainer}" "${settingObject}"
}

changeSetting_database() {
   setValue "${settingContainer}" "${settingObject}" "${settingValue}"
}

getEnabledAccessibilityServices() {
   local services="$(getValue secure enabled_accessibility_services)"
   accessibilityServices=( ${services//:/ } )
}

testAccessibilityService() {
   local service
   local package

   for service in "${accessibilityServices[@]}"
   do
      package="${service%%/*}"
      [ "${package}" != "${settingContainer}" ] || return 0
   done

   return 1
}

showSetting_accessibility() {
   getEnabledAccessibilityServices
   local enabled=1
   testAccessibilityService || enabled=0
   echo "${enabled}"
}

showSetting_property() {
   execute getprop "${settingObject}"
}

changeSetting_property() {
   execute setprop "${settingObject}" "${settingValue}"
}

useEmulator=false
deviceSerialNumber=""

while getopts ":d:e" option
do
   case "${option}"
   in
      :) syntaxError "missing option value: -${OPTARG}";;
     \?) syntaxError "unknown option: -${OPTARG}";;
      *) syntaxError "unimplemented option: -${option}";;
   esac
done
shift $((OPTIND - 1))

[ "${#}" -gt 0 ] || syntaxError "missing setting name"
settingName="${1}"
shift 1

settingDescriptor="${settingTable["${settingName}"]}"
[ -n "${settingDescriptor}" ] || syntaxError "unknown setting name: ${settingName}";
settingAttributes=( ${settingDescriptor} )
settingType="${settingAttributes[0]}"
settingObject="${settingAttributes[1]}"
settingContainer="${settingAttributes[2]}"

[ "${#}" -gt 0 ] || {
   "showSetting_${settingType}"
   exit 0
}

settingValue="${1}"
shift 1
[ "${#}" -eq 0 ] || syntaxError "too many parameters"

"changeSetting_${settingType}"
exit 0
