#!/bin/bash

declare -A settingTable=(
   ["country"]="property territory persist.sys.country"
   ["language"]="property language persist.sys.language"

   ["accessibility"]="database boolean accessibility_enabled secure"
   ["foreign"]="database boolean install_non_market_apps secure"
   ["nolock"]="database boolean lockscreen.disabled secure"

   ["timeout"]="database integer screen_off_timeout system"

   ["brltty"]="accessibility boolean org.a11y.brltty.android.BrailleService org.a11y.brltty.android"
   ["spiel"]="accessibility boolean info.spielproject.spiel.SpielService info.spielproject.spiel"
   ["talkback"]="accessibility boolean .TalkBackService com.google.android.marvin.talkback"
)

databasePath="/data/data/com.android.providers.settings/databases/settings.db"
offValue=0
onValue=1

programName="${0##*/}"
programMessage() {
   local message="${1}"

   echo >&2 "${programName}: ${message}"
}

syntaxError() {
   local message="${1}"

   programMessage "${message}"
   exit 2
}

semanticError() {
   local message="${1}"

   programMessage "${message}"
   exit 3
}

internalError() {
   local message="${1}"

   programMessage "${message}"
   exit 4
}

executeShellCommand() {
   local output="$(adb shell "${@}")"
   output="${output//$'\r'}"
   [ -z "${output}" ] || echo "${output}"
}

executeDatabaseCommand() {
   local command="${1}"

   executeShellCommand sqlite3 "${databasePath}" "${command}"
}

getDatabaseValue() {
   local table="${1}"
   local property="${2}"

   executeDatabaseCommand "select value from ${table} where name=\"${property}\""
}

setDatabaseValue() {
   local table="${1}"
   local property="${2}"
   local value="${3}"

   executeDatabaseCommand "update ${table} set value="\"${value}\"" where name=\"${property}\""
}

verifyPackageInstalled() {
   local output="$(executeShellCommand pm path "${settingContainer}")"
   [ -n "${output}" ] || semanticError "package not installed: ${settingName}"
}

showSetting_database() {
   getDatabaseValue "${settingContainer}" "${settingObject}"
}

changeSetting_database() {
   setDatabaseValue "${settingContainer}" "${settingObject}" "${settingValue}"
}

getEnabledAccessibilityServices() {
   local services="$(getDatabaseValue secure enabled_accessibility_services)"
   enabledAccessibilityServices=( ${services//:/ } )
}

findEnabledAccessibilityService() {
   enabledAccessibilityServiceIndex=0

   local service
   local package

   for service in "${enabledAccessibilityServices[@]}"
   do
      package="${service%%/*}"
      [ "${package}" != "${settingContainer}" ] || return
      let "enabledAccessibilityServiceIndex+=1"
   done

   enabledAccessibilityServiceIndex=""
}

showSetting_accessibility() {
   getEnabledAccessibilityServices
   findEnabledAccessibilityService

   if [ -n "${enabledAccessibilityServiceIndex}" ]
   then
      echo "${onValue}"
   else
      echo "${offValue}"
   fi
}

changeSetting_accessibility() {
   getEnabledAccessibilityServices
   findEnabledAccessibilityService

   case "${settingValue}"
   in
      ${offValue})
         [ -n "${enabledAccessibilityServiceIndex}" ] || return
         unset enabledAccessibilityServices["${enabledAccessibilityServiceIndex}"]
         ;;

      ${onValue})
         [ -z "${enabledAccessibilityServiceIndex}" ] || return
         verifyPackageInstalled
         enabledAccessibilityServices+=( "${settingContainer}/${settingObject}" )
         ;;

      *) internalError "unimplemented value: ${settingValue}";;
   esac

   local services="${enabledAccessibilityServices[*]}"
   services="${services// /:}"
   setDatabaseValue secure enabled_accessibility_services "${services}"
}

showSetting_property() {
   executeShellCommand getprop "${settingObject}"
}

changeSetting_property() {
   executeShellCommand setprop "${settingObject}" "${settingValue}"
}

verifyValue_boolean() {
   [ "${settingValue}" = "${offValue}" -o "${settingValue}" = "${onValue}" ] || {
      if [[ "${settingValue}" =~ ^(off|false)$ ]]
      then
         settingValue="${offValue}"
      elif [[ "${settingValue}" =~ ^(on|true)$ ]]
      then
         settingValue="${onValue}"
      else
         return 1
      fi
   }

   return 0
}

verifyValue_integer() {
   [[ "${settingValue}" =~ ^(0|1[0-9]*)$ ]] || return 1
   return 0
}

verifyValue_language() {
   [ "${#settingValue}" -ne 2 ] || {
      [ "${settingValue,,*}" != "${settingValue}" ] || {
         return 0
      }
   }

   return 1
}

verifyValue_territory() {
   [ "${#settingValue}" -ne 2 ] || {
      [ "${settingValue^^*}" != "${settingValue}" ] || {
         return 0
      }
   }

   return 1
}

useEmulator=false
deviceSerialNumber=""

while getopts ":d:e" option
do
   case "${option}"
   in
      :) syntaxError "missing option value: -${OPTARG}";;
     \?) syntaxError "unknown option: -${OPTARG}";;
      *) internalError "unimplemented option: -${option}";;
   esac
done
shift $((OPTIND - 1))

[ "${#}" -gt 0 ] || syntaxError "missing setting name"
settingName="${1}"
shift 1

settingDescriptor="${settingTable["${settingName}"]}"
[ -n "${settingDescriptor}" ] || syntaxError "unknown setting name: ${settingName}";
settingAttributes=( ${settingDescriptor} )
settingClass="${settingAttributes[0]}"
settingType="${settingAttributes[1]}"
settingObject="${settingAttributes[2]}"
settingContainer="${settingAttributes[3]}"

[ "${#}" -gt 0 ] || {
   "showSetting_${settingClass}"
   exit 0
}

settingValue="${1}"
shift 1
[ "${#}" -eq 0 ] || syntaxError "too many parameters"

"verifyValue_${settingType}" || syntaxError "invalid setting value: ${settingName}=${settingValue}"
"changeSetting_${settingClass}"
exit 0
