#!/bin/bash

declare -A settingDescriptors=(
   ["developer-settings"]="boolean database development_settings_enabled secure"
   ["adb-server"]="boolean property persist.service.adb.enable"
   ["adb-enabled"]="boolean database adb_enabled secure"

   ["accessibility-services"]="boolean database accessibility_enabled secure"
   ["brltty-service"]="boolean accessibility org.a11y.brltty.android.BrailleService org.a11y.brltty.android"
   ["spiel-service"]="boolean accessibility info.spielproject.spiel.SpielService info.spielproject.spiel"
   ["talkback-service"]="boolean accessibility .TalkBackService com.google.android.marvin.talkback"

   ["b2g-input-service"]="boolean input .InputService org.nbp.b2g.input"
   ["b2g-screen-monitor"]="boolean accessibility .ScreenMonitor org.nbp.b2g.input"

   ["screen-timeout"]="milliseconds database screen_off_timeout system"
   ["no-device-lock"]="boolean database lockscreen.disabled secure"
   ["foreign-sources"]="boolean database install_non_market_apps secure"

   ["locale-language"]="ISO_639 property persist.sys.language"
   ["locale-territory"]="ISO_3166 property persist.sys.country"
)

databasePath="/data/data/com.android.providers.settings/databases/settings.db"

offValue=0
onValue=1

offWords=(off no false)
onWords=(on yes true)

programName="${0##*/}"
programMessage() {
   local message="${1}"

   echo >&2 "${programName}: ${message}"
}

syntaxError() {
   local message="${1}"

   programMessage "${message}"
   exit 2
}

semanticError() {
   local message="${1}"

   programMessage "${message}"
   exit 3
}

internalError() {
   local message="${1}"

   programMessage "${message}"
   exit 4
}

getComponentPackage() {
   local component="${1}"

   echo "${component%/*}"
}

getComponentClass() {
   local component="${1}"

   echo "${component#*/}"
}

makeComponent() {
   local package="${1}"
   local class="${2}"

   echo "${package}/${class}"
}

makeSettingComponent() {
   makeComponent "${settingContainer}" "${settingObject}"
}

executeShellCommand() {
   local output="$(adb shell "${@}")"
   output="${output//$'\r'}"
   [ -z "${output}" ] || echo "${output}"
}

executeDatabaseCommand() {
   local command="${1}"

   executeShellCommand sqlite3 "${databasePath}" "${command}"
}

getDatabaseValue() {
   local table="${1}"
   local property="${2}"

   executeDatabaseCommand "select value from ${table} where name=\"${property}\""
}

setDatabaseValue() {
   local table="${1}"
   local property="${2}"
   local value="${3}"

   executeDatabaseCommand "update ${table} set value="\"${value}\"" where name=\"${property}\""
}

verifyPackageInstalled() {
   local output="$(executeShellCommand pm path "${settingContainer}")"
   [ -n "${output}" ] || semanticError "package not installed: ${settingName}"
}

showSetting_database() {
   getDatabaseValue "${settingContainer}" "${settingObject}"
}

changeSetting_database() {
   setDatabaseValue "${settingContainer}" "${settingObject}" "${settingValue}"
}

getEnabledAccessibilityServices() {
   local services="$(getDatabaseValue secure enabled_accessibility_services)"
   enabledAccessibilityServices=( ${services//:/ } )
}

findEnabledAccessibilityService() {
   enabledAccessibilityServiceIndex=0

   local component
   local package

   for component in "${enabledAccessibilityServices[@]}"
   do
      package="$(getComponentPackage "${component}")"
      [ "${package}" != "${settingContainer}" ] || return
      let "enabledAccessibilityServiceIndex+=1"
   done

   enabledAccessibilityServiceIndex=""
}

showSetting_accessibility() {
   getEnabledAccessibilityServices
   findEnabledAccessibilityService

   if [ -n "${enabledAccessibilityServiceIndex}" ]
   then
      echo "${onValue}"
   else
      echo "${offValue}"
   fi
}

changeSetting_accessibility() {
   getEnabledAccessibilityServices
   findEnabledAccessibilityService

   case "${settingValue}"
   in
      ${offValue})
         [ -n "${enabledAccessibilityServiceIndex}" ] || return
         unset enabledAccessibilityServices["${enabledAccessibilityServiceIndex}"]
         ;;

      ${onValue})
         [ -z "${enabledAccessibilityServiceIndex}" ] || return
         verifyPackageInstalled
         enabledAccessibilityServices+=( "$(makeSettingComponent)" )
         ;;

      *) internalError "unimplemented value: ${settingValue}";;
   esac

   local services="${enabledAccessibilityServices[*]}"
   services="${services// /:}"
   setDatabaseValue secure enabled_accessibility_services "${services}"
}

showSetting_input() {
   local desired="$(makeSettingComponent)"
   local current="$(getDatabaseValue secure default_input_method)"

   if [ "${current}" = "${desired}" ]
   then
      echo "${onValue}"
   else
      echo "${offValue}"
   fi
}

changeSetting_input() {
   local component="$(makeSettingComponent)"

   case "${settingValue}"
   in
      ${offValue})
         executeShellCommand "ime disable ${component}"
         ;;

      ${onValue})
         executeShellCommand "ime enable ${component}"
         executeShellCommand "ime set ${component}"
         ;;

      *) internalError "unimplemented value: ${settingValue}";;
   esac
}

getPropertyValue() {
   local property="${1}"

   executeShellCommand getprop "${property}"
}

setPropertyValue() {
   local property="${1}"
   local value="${2}"

   executeShellCommand setprop "${property}" "${value}"
}

showSetting_property() {
   getPropertyValue "${settingObject}"
}

changeSetting_property() {
   setPropertyValue "${settingObject}" "${settingValue}"
}

verifyValue_boolean() {
   [ "${settingValue}" != "${offValue}" -a "${settingValue}" != "${onValue}" ] || return 0
   local word

   for word in "${offWords[@]}"
   do
      [ "${settingValue}" != "${word}" ] || {
         settingValue="${offValue}"
         return 0
      }
   done

   for word in "${onWords[@]}"
   do
      [ "${settingValue}" != "${word}" ] || {
         settingValue="${onValue}"
         return 0
      }
   done

   return 1
}

verifyValue_milliseconds() {
   [[ "${settingValue}" =~ ^(0|1[0-9]*)$ ]] || return 1
   return 0
}

verifyValue_ISO_639() {
   [ "${#settingValue}" -ne 2 ] || {
      [ "${settingValue,,*}" != "${settingValue}" ] || {
         return 0
      }
   }

   return 1
}

verifyValue_ISO_3166() {
   [ "${#settingValue}" -ne 2 ] || {
      [ "${settingValue^^*}" != "${settingValue}" ] || {
         return 0
      }
   }

   return 1
}

getSettingNames() {
   settingNames=${!settingDescriptors[*]}
   settingNames="${settingNames// /$'\n'}"
   settingNames="$(echo "${settingNames}" | sort)"
}

getSettingAttributes() {
   local descriptor="${settingDescriptors["${settingName}"]}"
   [ -n "${descriptor}" ] || syntaxError "unknown setting name: ${settingName}";

   local attributes=( ${descriptor} )
   settingType="${attributes[0]}"
   settingClass="${attributes[1]}"
   settingObject="${attributes[2]}"
   settingContainer="${attributes[3]}"
}

showMilliseconds() {
   local value="${1}"
   echo "${value}"
}

showSetting() {
   local value="$("showSetting_${settingClass}")"

   case "${settingType}"
   in
      milliseconds) showMilliseconds "${value}";;
      *) echo "${value}";;
   esac
}

showAllSettings() {
   getSettingNames

   for settingName in ${settingNames}
   do
      getSettingAttributes
      echo "${settingName}: $(showSetting) (${settingType})"
   done
}

showUsage() {
   local booleanValues="${offValue}/${onValue}"
   local booleanIndex=0

   while [ "${booleanIndex}" -lt "${#offWords[*]}" ]
   do
      booleanValues+=", ${offWords[booleanIndex]}/${onWords[booleanIndex]}"
      let "booleanIndex+=1"
   done

   cat <<END-OF-HELP
Usage: ${programName} [-option ...] [setting [value]]
If invoked with no arguments then display all settings, one per line, as:

   name: value (type)

If invoked with one argument then just display that setting's current value.
If invoked with both arguments then change the setting (nothing is displayed).
A boolean value may be: ${booleanValues}

Options:
   -h  (help)  Display this command usage summary, and then exit.
END-OF-HELP

   exit 0
}

while getopts ":h" option
do
   case "${option}"
   in
      h) showUsage;;

      :) syntaxError "missing option value: -${OPTARG}";;
     \?) syntaxError "unknown option: -${OPTARG}";;
      *) internalError "unimplemented option: -${option}";;
   esac
done
shift $((OPTIND - 1))

[ "${#}" -gt 0 ] || {
   showAllSettings
   exit 0
}

settingName="${1}"
shift 1
getSettingAttributes

[ "${#}" -gt 0 ] || {
   showSetting
   exit 0
}

settingValue="${1}"
shift 1
[ "${#}" -eq 0 ] || syntaxError "too many parameters"

"verifyValue_${settingType}" || syntaxError "invalid setting value: ${settingName}=${settingValue}"
"changeSetting_${settingClass}"
exit 0
