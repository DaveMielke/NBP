#!/usr/bin/sh
. "$(dirname "${0}")/prologue.sh"

set -e
set -o ignoreeof
umask 022

readonly programName="rsh"
readonly recoveryLog="/tmp/recovery/recovery.log"
readonly nl=$'\n'

viewFile() {
  local file="${1}"

  vi -R "${file}"
}

awaitPath() {
  local file="${1}"

  while [ ! -f "${file}" ]
  do
    sleep 1
  done
}

watchFile() {
  local file="${1}"
  local handleLine="${2}"
  
  [ ! -f "${file}" ] || {
    exec 3<"${file}"

    while true
    do
      while read -u3 line
      do
        ! "${handleLine}" "${line}" || break 2
      done

      sleep 1
    done

    exec 3<&-
  }
}

stopBraille() {
  braille stop || return "${?}"
}

startBraille() {
  braille start || return "${?}"
}

withoutBraille() {
  local stopped=true
  stopBraille || stopped=false

  local status=0
  "${@}" || status="${?}"

  ! "${stopped}" || startBraille || :
  return "${status}"
}

actionCount=0
nameWidth=0

addAction() {
  local name="${1}"
  local description="${2}"

  setVariable "name_$((actionCount))" "${name}"
  setVariable "description_${actionCount}" "${description}"

  [ "${#name}" -le "${nameWidth}" ] || nameWidth="${#name}"
  local alias="${name}"

  while [ "${#alias}" -gt 0 ]
  do
    local variable="alias_${alias}"
    local value="$(getVariable "${variable}")"

    if [ -z "${value}" ]
    then
      value="${actionCount}"
    else
      value="${value} ${actionCount}"
    fi

    setVariable "${variable}" "${value}"
    alias="${alias:0:$((${#alias} - 1))}"
  done

  let "actionCount += 1"
}

listActions() {
  echo "Action List (unambiguous abbreviations are allowed):"

  [ -n "${actionList}" ] || {
    local lines=""
    local index=0

    while [ "${index}" -lt "${actionCount}" ]
    do
      local name="$(getVariable "name_${index}")"
      local line="${name}"

      while [ "${#line}" -lt "${nameWidth}" ]
      do
        line="${line} "
      done

      line="${line}  $(getVariable "description_${index}")"
      
      [ -z "${lines}" ] || lines="${lines}${nl}"
      lines="${lines}${line}"

      let "index += 1"
    done

    actionList="$(echo "${lines}" | sort)"
  }

  echo "${actionList}"
}

getAction() {
  local action="${1}"

  if [ -z "${action}" ]
  then
    programMessage "action not specified"
  elif ! isVariable "${action}"
  then
    programMessage "invalid action name: ${action}"
  else
    set -- $(getVariable "alias_${action}")

    if [ "${#}" -eq 1 ]
    then
      echo "$(getVariable "name_${1}")"
    elif [ "${#}" -eq 0 ]
    then
      programMessage "unrecognized action: ${action}"
    else
      local names=""
      local index

      for index
      do
        [ -z "${names}" ] || names="${names}, "
        names="${names}$(getVariable "name_${index}")"
      done

      programMessage "ambiguous action: ${action} -> ${names}"
    fi
  fi
}

performAction() {
  local action="${1}"
  shift 1

  local name="$(getAction "${action}")"
  [ -n "${name}" ] || return "${syntaxError}"
  "performAction_${name}" "${@}" || return "${?}"
}

performActions() {
  while true
  do
    askUser "recovery> "

    if [ -z "${REPLY}" ]
    then
      echo ""
      listActions
    else
      performAction "${REPLY}" || :
    fi
  done
}

addAction boot "boot main system"
performAction_boot() {
  eval "${noMoreParameters}"

  confirmAction "boot system" || {
    programMessage "boot cancelled"
    return "${operationCancelled}"
  }

  withoutBraille recovery --just_exit
}

addAction off "power down device"
performAction_off() {
  eval "${noMoreParameters}"

  confirmAction "power down" || {
    programMessage "power down cancelled"
    return "${operationCancelled}"
  }

  withoutBraille poweroff -f
}

addAction clear "wipe cache partition"
performAction_clear() {
  eval "${noMoreParameters}"

  confirmAction "wipe cache" || {
    programMessage "wipe cancelled"
    return "${operationCancelled}"
  }

  withoutBraille recovery --wipe_cache
}

addAction reset "factory reset (wipe cache and user data)"
performAction_reset() {
  eval "${noMoreParameters}"

  confirmAction "factory reset" || {
    programMessage "reset cancelled"
    return "${operationCancelled}"
  }

  withoutBraille recovery --wipe_data
}

addAction log "view recovery log"
performAction_log() {
  eval "${noMoreParameters}"

  viewFile "${recoveryLog}"
}

if [ -f /etc/recovery.fstab ]
then
  isMountPoint() {
    local path="${1}"
  
    set -- $(awk -v "path=${path}" '$1 == path { print $0; exit }' /etc/recovery.fstab)
    [ "${#}" -gt 0 ] || return 1

    mountDirectory="${1}"
    mountType="${2}"
    mountVolume="${3}"
    return 0
  }
else
  isMountPoint() {
    local path="${1}"
  
    return 1
  }
fi

if [ -f /proc/mounts ]
then
  isNotMounted() {
    local path="${1}"
  
    awk -v "path=${path}" '$2 == path { exit 1 }' /proc/mounts || return 1
    return 0
  }
else
  isNotMounted() {
    local path="${1}"
  
    return 1
  }
fi

mountVolume() {
  local path="${1}"
  local location="${2:-${path}}"
  
  if ! isMountPoint "${path}"
  then
    mountProblem="not a mount point: ${path}"
  elif ! isNotMounted "${location}"
  then
    mountProblem="already mounted: ${location}"
  elif mount -r -t "${mountType}" "${mountVolume}" "${location}"
  then
    return 0
  fi
  
  return 1
}

unmountVolume() {
  local path="${1}"
  
  umount "${path}"
}

findMountPoint() {
  local path="${1}"

  while [ "${path}" != "/" ]
  do
    ! isMountPoint "${path}" || break
    path="$(dirname "${path}")"
  done

  echo "${path}"
}

getRealPath() {
  local path="${1}"
  [ "${path}" != "${path#/}" ] || path="$(pwd)/${path}"

  while [ -h "${path}" ]
  do
    local target="$(readlink "${path}")"
    [ "${target}" != "${target#/}" ] || target="$(dirname "${path}")/${target}"
    path="${target}"
  done

  echo "${path}"
}

chooseFile() {
  local directory="${1}"
  shift 1
  local index=1

  while true
  do
    if [ "${#}" -gt 0 ]
    then
      eval 'local name=${'"${index}"'}'
      local path="${directory}${name}"

      local indicator=""
      local mount=false

      if [ -d "${path}" ]
      then
        indicator='/'
        mount=true
      elif [ -f "${path}" ]
      then
        if [ -x "${path}" ]
        then
          indicator='*'
        fi
      elif [ -p "${path}" ]
      then
        indicator='|'
      elif [ -S "${path}" ]
      then
        indicator='='
      elif [ -c "${path}" ]
      then
        indicator='%'
      elif [ -b "${path}" ]
      then
        indicator='$'
      elif [ -h "${path}" ]
      then
        indicator='@'
        mount=true
      else
        indicator='?'
      fi

      name="${name}${indicator}"
    else
      local name="(empty folder)"
      local path=""
    fi

    rewriteLine "${name}"
    read -s -n 1 || return 1

    local problem=""
    clearLine

    case "${REPLY}"
    in
      a|f) {
        [ "${index}" -le 1 ] || {
          let "index -= 1"
          continue
        }

        problem="start of list"
      };;

     \`|j) {
        [ "${index}" -ge "${#}" ] || {
          let "index += 1"
          continue
        }

        problem="end of list"
      };;

     \'|s) {
       return 1
     };;

      1|d) {
        return 0
      };;

     \"|k) {
        [ -z "${path}" ] || {
          local done=true
          local mounted=false
          local mountPoint

          ! "${mount}" || {
            if [ -d "${path}" ]
            then
              mountPoint="${path}"
            else
              mountPoint="$(findMountPoint "$(getRealPath "${path}")")"
            fi

            ! mountVolume "${mountPoint}" || mounted=true
          }

          if [ -d "${path}" ]
          then
            ! chooseFile "${path}/" $(cd "${path}" && ls -1) || done=false
          else
            echo "${path}"
          fi

          ! "${mounted}" || unmountVolume "${mountPoint}"
          ! "${done}" && continue
          return 1
        }
        
        problem="not selectable"
      };;

      *) {
        problem="unrecognized action"
      };;
    esac

    rewriteLine "\\a${problem}"
    sleep 1.5
  done
}

findFile() {
  writeLine "Dot1  previous"
  writeLine "Dot4  next"
  writeLine "Dot2  back"
  writeLine "Dot5  select"
  writeLine "Dot3  quit"

  set -- /cache /data "${EXTERNAL_STORAGE}" ${SECONDARY_STORAGE//:/ }
  local count="${#}"

  while [ "${count}" -gt 0 ]
  do
    local path="${1}"
    [ ! -d "${path}" -a ! -h "${path}" ] || set -- "${@}" "${path#/}"

    shift 1
    let "count -= 1" || :
  done

  local file="$(chooseFile / "${@}" || :)"
  clearLine

  [ -z "${file}" ] || echo "${file}"
}

addAction update "apply system update"
performAction_update() {
  eval "${noMoreParameters}"

  local file="$(findFile)"

  [ -n "${file}" ] || {
    programMessage "file not chosen"
    return "${operationCancelled}"
  }

  programMessage "file: ${file}"

  confirmAction "apply update" || {
    programMessage "update cancelled"
    return "${operationCancelled}"
  }

  withoutBraille recovery "--update_package=${file}"
}

addAction details "display build details"
performAction_details() {
  eval "${noMoreParameters}"

  set -- engineering user
  isEngineeringBuild || shift 1
  echo "Type: ${1}"

  echo "Build: $(getProperty ro.build.id)"
  echo "Kernel: $(uname -r)"
  echo "Firmware: $(getMSP430Version)"
  echo "Hardware: $(uname -m)"
}

addAction time "display date and time"
performAction_time() {
  eval "${noMoreParameters}"

  date +"%Y-%m-%d@%H:%M:%S"
}

if [ "${#}" -eq 0 ]
then
  if isEngineeringBuild
  then
    addAction exit "exit this menu"
    performAction_exit() {
      eval "${noMoreParameters}"

      confirmAction "exit menu" || {
        programMessage "exit cancelled"
        return "${operationCancelled}"
      }

      programMessage "menu exited"
      stopBraille
      exit 0
    }

    addAction shell "start interactive shell"
    performAction_shell() {
      eval "${noMoreParameters}"

      PS1="${programName}:\W# " /usr/bin/sh || :
    }
  fi

  handleRecoveryLogLine() {
    local line="${1}"

    case "${line}"
    in
      *" select the action "*) return 0;;
      *[Ff]"inding "[Uu]"pdate"*) rewriteLine "finding update";;
      *[Oo]"pening "[Uu]"pdate"*) rewriteLine "opening update";;
      *[Vv]"erifying "[Uu]"pdate"*) rewriteLine "verifying update";;
      *[Ii]"nstalling "[Uu]"pdate"*) rewriteLine "installing update";;
      *[Ff]"lashing "[Kk]"ernel"*) rewriteLine "flashing kernel";;
      *[Ff]"lashing "[Rr]"ecovery"*) rewriteLine "flashing recovery";;
      *[Ff]"lashing "[Ss]"ystem"*) rewriteLine "flashing system";;

      *[Ff]"ormatting /"*)
        local path="${line#* /}"
        path="${path%...}"
        rewriteLine "wiping ${path}"
        ;;
    esac

    return 1
  }

  rewriteLine "Recovery Mode"
  watchFile "${recoveryLog}" handleRecoveryLogLine
  clearLine

  sound -q configure
  echo "Recovery Mode Menu"
  echo ""

  listActions
  performActions
else
  addAction help "show action list"
  performAction_help() {
    eval "${noMoreParameters}"

    listActions
  }

  addAction mount "mount a directory"
  performAction_mount() {
    [ "${#}" -ge 1 ] || {
      programMessage "directory not specified"
      return "${syntaxError}"
    }

    local directory="${1}"
    shift 1

    if [ "${#}" -ge 1 ]
    then
      local location="${1}"
      shift 1
    else
      local location=""
    fi

    eval "${noMoreParameters}"

    mountVolume "${directory}" "${location}" || {
      programMessage "${mountProblem}"
      return "${operationFailed}"
    }
  }

  performAction "${@}" || exit "${?}"
fi

exit 0
