#!/usr/bin/sh

set -e
set -o ignoreeof
umask 022

programName="rsh"

programMessage() {
  local message="${1}"

  echo >&2 "${programName}: ${message}"
}

getVariable() {
  eval 'echo ${'"${1}"'}'
}

setVariable() {
  eval "${1}='${2}'"
}

askUser() {
  local prompt="${1}"
  shift 1

  read -p "${prompt}" -- "${@}" || {
    echo >&2 ""
    programMessage "end of file"
    exit 1
  }
}

confirmAction() {
  local action="${1}"

  while true
  do
    askUser "${action}? "

    case "${REPLY}"
    in
      yes|ye|y) return 0;;
      no|n) return 1;;
      *) programMessage "unrecognized confirmation: ${REPLY}";;
    esac
  done
}

stopBraille() {
  braille stop
}

startBraille() {
  braille start
}

actionCount=0
nameWidth=0

addAction() {
  local name="${1}"
  local description="${2}"

  setVariable "name_$((actionCount))" "${name}"
  setVariable "description_${actionCount}" "${description}"

  [ "${#name}" -le "${nameWidth}" ] || nameWidth="${#name}"
  local alias="${name}"

  while [ "${#alias}" -gt 0 ]
  do
    local variable="alias_${alias}"
    local value="$(getVariable "${variable}")"

    if [ -z "${value}" ]
    then
      value="${actionCount}"
    else
      value="${value} ${actionCount}"
    fi

    setVariable "${variable}" "${value}"
    alias="${alias:0:$((${#alias} - 1))}"
  done

  let "actionCount += 1"
}

showActions() {
  echo ""
  echo "Choose an action (unambiguous abbreviations are allowed):"
  local actionIndex=0

  while [ "${actionIndex}" -lt "${actionCount}" ]
  do
    local name="$(getVariable "name_${actionIndex}")"
    local line="${name}"

    while [ "${#line}" -lt "${nameWidth}" ]
    do
      line="${line} "
    done

    line="${line}  $(getVariable "description_${actionIndex}")"
    echo "${line}"
    
    let "actionIndex += 1"
  done
}

performActions() {
  while true
  do
    askUser "action> "
    if [ -z "${REPLY}" ]
    then
      showActions
    else
      set -- $(getVariable "alias_${REPLY}")

      if [ "${#}" -eq 1 ]
      then
        local name="$(getVariable "name_${1}")"
        eval "performAction_${name}"
      elif [ "${#}" -eq 0 ]
      then
        programMessage "unrecognized action: ${REPLY}"
      else
        local names=""
        local index

        for index
        do
          [ -z "${names}" ] || names="${names}, "
          names="${names}$(getVariable "name_${index}")"
        done

        programMessage "ambiguous action: ${REPLY} -> ${names}"
      fi
    fi
  done
}

addAction boot "boot main system"
performAction_boot() {
  if confirmAction "boot system"
  then
    reboot -f
  else
    programMessage "boot cancelled"
  fi
}

addAction cache "wipe cache partition"
performAction_cache() {
  if confirmAction "wipe cache"
  then
    stopBraille
    recovery --wipe_cache
    startBraille
  else
    programMessage "wipe cancelled"
  fi
}

addAction data "wipe data partition (factory reset)"
performAction_data() {
  if confirmAction "wipe data"
  then
    stopBraille
    recovery --wipe_data
    startBraille
  else
    programMessage "wipe cancelled"
  fi
}

addAction exit "exit this menu"
performAction_exit() {
  if confirmAction "exit menu"
  then
    programMessage "menu exited"
    stopBraille
    exit 0
  else
    programMessage "exit cancelled"
  fi
}

addAction shell "start interactive shell"
performAction_shell() {
  PS1="${programName}:\W# " /usr/bin/sh || :
}

addAction update "apply OTA update"
performAction_update() {
  programMessage "not implemented"
}

echo "Recovery Mode Menu"
showActions
performActions
exit 0
