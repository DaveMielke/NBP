#!/usr/bin/sh

set -e
set -o ignoreeof
umask 022

readonly programName="rsh"
readonly nl=$'\n'

writeLine() {
  local line="${1}"

  echo >&2 -e "${line}"
}

writeCharacters() {
  local characters="${1}"

  writeLine "${characters}\\c"
}

rewriteLine() {
  local line="${1}"

  writeCharacters "\\r${line}\\e[K"
}

clearLine() {
  rewriteLine ""
}

programMessage() {
  local message="${1}"

  writeLine "${programName}: ${message}"
}

syntaxError() {
  local message="${1}"

  programMessage "${message}"
  exit 2
}

getVariable() {
  eval 'echo ${'"${1}"'}'
}

setVariable() {
  eval "${1}='${2}'"
}

askUser() {
  local prompt="${1}"
  shift 1

  read -p "${prompt}" -- "${@}" || {
    echo >&2 ""
    programMessage "end of file"
    exit 1
  }
  
  ! REPLY="$(expr "${REPLY}" : ' *\(.*\)')" ||
  REPLY="$(expr "${REPLY}" : '\(.*[^ ]\) *$')"
}

confirmAction() {
  local action="${1}"

  while true
  do
    askUser "${action}? "

    case "${REPLY}"
    in
      yes|ye|y) return 0;;
      no|n) return 1;;
      *) programMessage "unrecognized confirmation: ${REPLY}";;
    esac
  done
}

stopBraille() {
  braille stop || :
}

startBraille() {
  braille start
}

actionCount=0
nameWidth=0

addAction() {
  local name="${1}"
  local description="${2}"

  setVariable "name_$((actionCount))" "${name}"
  setVariable "description_${actionCount}" "${description}"

  [ "${#name}" -le "${nameWidth}" ] || nameWidth="${#name}"
  local alias="${name}"

  while [ "${#alias}" -gt 0 ]
  do
    local variable="alias_${alias}"
    local value="$(getVariable "${variable}")"

    if [ -z "${value}" ]
    then
      value="${actionCount}"
    else
      value="${value} ${actionCount}"
    fi

    setVariable "${variable}" "${value}"
    alias="${alias:0:$((${#alias} - 1))}"
  done

  let "actionCount += 1"
}

listActions() {
  echo "${nl}Action List (unambiguous abbreviations are allowed):"

  [ -n "${actionList}" ] || {
    local lines=""
    local index=0

    while [ "${index}" -lt "${actionCount}" ]
    do
      local name="$(getVariable "name_${index}")"
      local line="${name}"

      while [ "${#line}" -lt "${nameWidth}" ]
      do
        line="${line} "
      done

      line="${line}  $(getVariable "description_${index}")"
      
      [ -z "${lines}" ] || lines="${lines}${nl}"
      lines="${lines}${line}"

      let "index += 1"
    done

    actionList="$(echo "${lines}" | sort)"
  }

  echo "${actionList}"
}

performAction() {
  local action="${1}"

  if [ -z "${action}" ]
  then
    programMessage "action not specified"
  else
    set -- $(getVariable "alias_${action}")

    if [ "${#}" -eq 1 ]
    then
      local name="$(getVariable "name_${1}")"
      eval "performAction_${name}"
    elif [ "${#}" -eq 0 ]
    then
      programMessage "unrecognized action: ${action}"
    else
      local names=""
      local index

      for index
      do
        [ -z "${names}" ] || names="${names}, "
        names="${names}$(getVariable "name_${index}")"
      done

      programMessage "ambiguous action: ${action} -> ${names}"
    fi
  fi
}

performActions() {
  while true
  do
    askUser "action> "

    if [ -z "${REPLY}" ]
    then
      listActions
    else
      performAction "${REPLY}"
    fi
  done
}

addAction boot "boot main system"
performAction_boot() {
  if confirmAction "boot system"
  then
    reboot -f
  else
    programMessage "boot cancelled"
  fi
}

addAction clear "wipe cache partition"
performAction_clear() {
  if confirmAction "wipe cache"
  then
    stopBraille
    recovery --wipe_cache
    startBraille
  else
    programMessage "wipe cancelled"
  fi
}

addAction reset "factory reset (wipe cache and user data)"
performAction_reset() {
  if confirmAction "factory reset"
  then
    stopBraille
    recovery --wipe_data
    startBraille
  else
    programMessage "reset cancelled"
  fi
}

mountDirectory() {
  local path="${1}"
  
  set -- $(awk -v "path=${path}" '$1 == path { print $0; exit }' /etc/recovery.fstab)
  
  [ "${#}" -eq 0 ] || {
    ! awk -v "path=${path}" '$2 == path { exit 1 }' /proc/mounts || {
      ! mount -t "${2}" "${3}" "${1}" || return 0
    }
  }
  
  return 1
}

unmountDirectory() {
  local path="${1}"
  
  umount "${path}"
}

chooseFile() {
  local directory="${1}"
  shift 1
  local index=1

  while true
  do
    if [ "${#}" -gt 0 ]
    then
      eval 'local name=${'"${index}"'}'
      local path="${directory}${name}"
      local indicator=""

      if [ -d "${path}" ]
      then
        indicator='/'
      elif [ -f "${path}" ]
      then
        if [ -x "${path}" ]
        then
          indicator='*'
        fi
      elif [ -h "${path}" ]
      then
        indicator='@'
      elif [ -p "${path}" ]
      then
        indicator='|'
      elif [ -S "${path}" ]
      then
        indicator='='
      elif [ -c "${path}" ]
      then
        indicator='%'
      elif [ -b "${path}" ]
      then
        indicator='$'
      else
        indicator='?'
      fi

      name="${name}${indicator}"
    else
      local name="(empty folder)"
      local path=""
    fi

    rewriteLine "${name}"
    read -s -n 1 || return 1

    local problem=""
    clearLine

    case "${REPLY}"
    in
      a|f) {
        [ "${index}" -le 1 ] || {
          let "index -= 1"
          continue
        }

        problem="start of list"
      };;

     \`|j) {
        [ "${index}" -ge "${#}" ] || {
          let "index += 1"
          continue
        }

        problem="end of list"
      };;

     \'|s) {
       return 1
     };;

      1|d) {
        return 0
      };;

     \"|k) {
        [ -z "${path}" ] || {
          if [ ! -d "${path}" ]
          then
            echo "${path}"
          else
            local mounted=false
            ! mountDirectory "${path}" || mounted=true

            local done=true
            ! chooseFile "${path}/" $(cd "${path}" && ls -1) || done=false

            ! "${mounted}" || unmountDirectory "${path}"
            ! "${done}" && continue
          fi

          return 1
        }
      };;

      *) {
        problem="unrecognized action"
      };;
    esac

    rewriteLine "\\a${problem}"
    sleep 1.5
  done
}

findFile() {
  writeLine "Dot1  previous"
  writeLine "Dot4  next"
  writeLine "Dot2  back"
  writeLine "Dot5  select"
  writeLine "Dot3  quit"

  set -- /cache /data "${EXTERNAL_STORAGE}" ${SECONDARY_STORAGE//:/ }
  local count="${#}"

  while [ "${count}" -gt 0 ]
  do
    local path="${1}"
    [ ! -d "${path}" ] || set -- "${@}" "${path#/}"

    shift 1
    let "count -= 1" || :
  done

  local file="$(chooseFile / "${@}" || :)"
  clearLine

  [ -z "${file}" ] || echo "${file}"
}

addAction update "apply OTA update"
performAction_update() {
  local file="$(findFile)"

  if [ -n "${file}" ]
  then
    programMessage "file: ${file}"

    if confirmAction "apply update"
    then
      stopBraille
      recovery "--update_package=${file}"
      startBraille
    else
      programMessage "update cancelled"
    fi
  else
    programMessage "file not chosen"
  fi
}

if [ "${#}" -eq 0 ]
then
  addAction exit "exit this menu"
  performAction_exit() {
    if confirmAction "exit menu"
    then
      programMessage "menu exited"
      stopBraille
      exit 0
    else
      programMessage "exit cancelled"
    fi
  }

  addAction shell "start interactive shell"
  performAction_shell() {
    PS1="${programName}:\W# " /usr/bin/sh || :
  }

  echo "Recovery Mode Menu"
  listActions
  performActions
else
  addAction actions "show action list"
  performAction_actions() {
    listActions
  }

  addAction mount "mount cache partition"
  performAction_mount() {
    local cache=/cache
    mountDirectory "${cache}" || programMessage "cache not mounted: ${cache}"
  }

  action="${1}"
  shift 1

  performAction "${action}"
fi

exit 0
