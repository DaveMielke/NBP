#!/usr/bin/sh

set -e
umask 007

readonly programName="${0##*/}"

programMessage() {
  local message="${1}"

  [ -z "${message}" ] || echo >&2 "${programName}: ${message}"
}

syntaxError() {
  local message="${1}"

  programMessage "${message}"
  exit 2
}

makeDevice() {
  local path="${1}"
  local type="${2}"
  local major="${3}"
  local minor="${4}"
  local owner="${5}"
  local group="${6}"
  local mode="${7}"

  [ "${path#/}" != "${path}" ] || path="/dev/${path}"

  [ -e "${path}" ] || {
    "${noOutput}" || programMessage "creating device: ${path}"
    mknod "${path}" "${type}" "${major}" "${minor}"
    [ -z "${mode}" ] || chmod "${mode}" "${path}"
    [ -z "${group}" ] || chgrp "${group}" "${path}"
    [ -z "${owner}" ] || chown "${owner}" "${path}"
  }
}

makeOssDevice() {
  local path="${1}"
  local minor="${2}"

  makeDevice "${path}" c 14 "${minor}" 1000 1005
}

alsaLoadControlList() {
  alsaControlList="$(tinymix)"
}

alsaGetControlIndex() {
  local name="${1}"

  name="${name//./\\.}"
  set -- $(echo "${alsaControlList}" | grep $'\t'"${name}  ")
  echo "${1}"
}

alsaSetControl() {
  local name="${1}"
  local value="${2}"

  local index="$(alsaGetControlIndex "${name}")"
  if [ -n "${index}" ]
  then
    tinymix "${index}" "${value}"
    "${noOutput}" || programMessage "mixer setting: $(tinymix "${index}")"
  else
    programMessage "unrecognized mixer control: ${name}"
  fi
}

noOutput=false
configureMixer=false
makeOssDevices=false

while getopts ":moq" option
do
  case "${option}"
  in
    q) noOutput=true;;

    m) configureMixer=true;;
    o) makeOssDevices=true;;

    :) syntaxError "missing operand: -${OPTARG}";;
   \?) syntaxError "unrecognized option: -${OPTARG}";;
    *) syntaxError "unimplemented option: -${OPTARG}";;
  esac
done

shift $((OPTIND - 1))
[ "${#}" -eq 0 ] || syntaxError "too many parameters"

"${configureMixer}" || "${makeOssDevices}" || {
  configureMixer=true
  makeOssDevices=true
}

! "${makeOssDevices}" || {
  makeOssDevice mixer 0
  makeOssDevice dsp   3
  makeOssDevice audio 4
}

! "${configureMixer}" || {
  systemMountpoint="/system"

  ! shell mount "${systemMountpoint}" || {
    alsaLoadControlList
    alsaSetControl 'DAC1 Switch' 1
    alsaSetControl 'Speaker Boost Volume' 7
    alsaSetControl 'Speaker Mixer Volume' 3

    alsaSetControl 'Left Output Mixer IN1L Switch' 1
    alsaSetControl 'Left Output Mixer IN1L Volume' 0
    alsaSetControl 'ADCL Mux' 0
    alsaSetControl 'AIF1ADC1L Mixer ADC/DMIC Switch' 1
    alsaSetControl 'AIF1ADC1R Mixer ADC/DMIC Switch' 1
    alsaSetControl 'IN1L PGA IN1LP Switch' 1
    alsaSetControl 'IN1L PGA IN1LN Switch' 1
    alsaSetControl 'IN1L Volume' 20
    alsaSetControl 'MIXINL IN1L Switch' 1
    alsaSetControl 'MIXINL IN1L Volume' 1
    alsaSetControl 'IN1R PGA IN1RP Switch' 1
    alsaSetControl 'IN1R PGA IN1RN Switch' 1
    alsaSetControl 'IN1R Volume' 22
    alsaSetControl 'MIXINR IN1R Switch' 1
    alsaSetControl 'MIXINR IN1R Volume' 1
    alsaSetControl 'DAC1L Mixer AIF1.1 Switch' 1
    alsaSetControl 'DAC1R Mixer AIF1.1 Switch' 1
    alsaSetControl 'Left Headphone Mux' 1
    alsaSetControl 'Right Headphone Mux' 1
    alsaSetControl 'Left Output Mixer DAC Switch' 1
    alsaSetControl 'Right Output Mixer DAC Switch' 1
    alsaSetControl 'SPKL Output Switch' 1
    alsaSetControl 'SPKR Output Switch' 1
    alsaSetControl 'DAC2 Left Sidetone Volume' 8
    alsaSetControl 'AIF2DAC2R Mixer Left Sidetone Switch' 1
    alsaSetControl 'AIF2DAC2L Mixer Left Sidetone Switch' 1
    alsaSetControl 'SPKR DAC2 Switch' 1
    alsaSetControl 'SPKR DAC2 Volume' 0

    umount "${systemMountpoint}"
  }
}

exit 0
