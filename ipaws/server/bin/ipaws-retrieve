#!/bin/bash

. "${0%/*}/prologue.sh"
verifyCommandAvailability curl
requireScriptLibraries command arguments options-common options-retrieve time

showCommandUsageSummary() {
   showRetrieveUsageSummary
}

responseError() {
   local message="${1}"

   logError "${message}"
   exit 10
}

handleCommandArguments "" "${@}"
prepareCommonCommandOptions
failIfAlreadyRunning

readonly currentTime="$(utcTime)"
logDebug "current-time ${currentTime}"

readonly alertsFileList=( "${dataDirectory}/"${utcTimeGlob}".${alertsFileExtension}" )
readonly alertsFileCount="${#alertsFileList[*]}"

if [ "${alertsFileCount}" -gt 0 ]
then
   referenceTime="${alertsFileList[alertsFileCount-1]}"
   referenceTime="${referenceTime##*/}"
   referenceTime="${referenceTime%.*}"
else
   referenceTime="${currentTime}"
fi

readonly referenceTime
logDebug "reference-time ${referenceTime}"

logDebug "server-type ${serverType}"
serverName="${configuredOptions["${serverType}-server"]}"
[ -n "${serverName}" ] || semanticError "server type not defined: ${serverType}"
logDebug "server-name ${serverName}"

requestURL="https://${serverName}"
requestURL+="/IPAWSOPEN_EAS_SERVICE/rest/"

readonly types=("" "eas" "public_non_eas" "public")
index=0
"${getEmergencyAlerts}" && let index+=1
"${getGeneralAlerts}" && let index+=2
(( index )) || index=3
type="${types[index]}"
[ -n "${type}" ] || semanticError "alert type combination not supported"
requestURL+="${type}"

verifyIntegerValue "${minutesBefore}" "minutes before" 1
requestURL+="/recent/$(utcTime "${referenceTime} -${minutesBefore} minutes")"

[ -z "${requestPIN}" ] && {
   pinFile="${configurationDirectory}/${serverType}.pin"
   [ -f "${pinFile}" ] && [ -r "${pinFile}" ] && read -r requestPIN <"${pinFile}" || :
}

logDebug "request-url ${requestURL}"
serverResponse=$(curl --silent --show-error --get --data-urlencode "pin=${requestPIN}" "${requestURL}") || exit "${?}"
[ -z "${serverResponse}" ] && responseError "no data received"
[ "${serverResponse}" = "${serverResponse#<}" ] && responseError "${serverResponse}"

if [ "${serverResponse}" != "${serverResponse#<?xml}" ]
then
   readonly outputFileExtension="${alertsFileExtension}"
else
   readonly outputFileExtension="${failureFileExtension}"
fi

readonly outputFileName="${currentTime}"
readonly outputFile="${dataDirectory}/${outputFileName}.${outputFileExtension}"
[ -e "${outputFile}" ] && responseError "output file already exists: ${outputFile}"
logDebug "output-file ${outputFile##*/}"

readonly temporaryFile="${outputFile%/*}/${alertsFileExtension}.retrieved"
echo >"${temporaryFile}" "${serverResponse}" || exit "${?}"

mv -- "${temporaryFile}" "${outputFile}"
chmod -- a-w "${outputFile}"
logInfo "new alert set: ${outputFileName##*/}"
exit 0
