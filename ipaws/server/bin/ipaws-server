#!/bin/bash

. "${0%/*}/prologue.sh"
verifyCommands ncat
includeScriptLibraries command arguments locks

readonly defaultMaximumClients=100
readonly defaultPortNumber=14216
readonly defaultRetrieveInterval=90

showCommandSpecificOptionsUsageSummary() {
cat <<END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY
-c path     the configuration directory (default is ${defaultConfigurationDirectory})
-d path     the data directory (default is ${defaultDataDirectory})
-M count    the maximum number of concurrent clients (default is ${defaultMaximumClients})
-P port     the port number to listen on (default is ${defaultPortNumber})
-R seconds  the alerts retrieval interval (default is ${defaultRetrieveInterval})

These options are passed through to ipaws-retrieve:
-e             get EAS [Emergency Alert System] alerts
-g             get general (non-EAS) alerts
-m minutes     how far before the reference time to look
-p characters  the server access PIN
-s type        which server to use
END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY
}

configurationDirectory=""
handleCommandOption_c() {
   configurationDirectory="${OPTARG}"
}

dataDirectory=""
handleCommandOption_d() {
   dataDirectory="${OPTARG}"
}

getEmergencyAlerts=false
handleCommandOption_e() {
   getEmergencyAlerts=true
}

getGeneralAlerts=false
handleCommandOption_g() {
   getGeneralAlerts=true
}

minutesBefore=""
handleCommandOption_m() {
   minutesBefore="${OPTARG}"
}

requestPIN=""
handleCommandOption_p() {
   requestPIN="${OPTARG}"
}

serverType=""
handleCommandOption_s() {
   serverType="${OPTARG}"
}

maximumClients=""
handleCommandOption_M() {
   maximumClients="${OPTARG}"
}

portNumber=""
handleCommandOption_P() {
   portNumber="${OPTARG}"
}

retrieveInterval=""
handleCommandOption_R() {
   retrieveInterval="${OPTARG}"
}

writeLog() {
   local currentName=""

   while read -r line
   do
      local newName
      printf -v newName "%(%Y%m%d)T" -1

      [ "${newName}" != "${currentNae}" ] && {
         currentName="${newName}"
         exec >>"${dataDirectory}/${currentName}.log"
      }

      echo -E "${line}"
   done
}

makeCommand() {
   local script="${1}"
   shift 1
   command=("${programDirectory}/${script}" -c "${configurationDirectory}" -d "${dataDirectory}" "${@}")
}

runScript() {
   makeCommand "${@}"
   "${command[@]}" || return "${?}"
}

retrieveAlerts() {
   local retrieveOptions=()
   "${getEmergencyAlerts}" && retrieveOptions+=(-e)
   "${getGeneralAlerts}" && retrieveOptions+=(-g)
   [ -n "${minutesBefore}" ] && retrieveOptions+=(-m "${minutesBefore}")
   [ -n "${requestPIN}" ] && retrieveOptions+=(-p "${requestPIN}")
   [ -n "${serverType}" ] && retrieveOptions+=(-s "${serverType}")

   while :
   do
      runScript ipaws-retrieve "${retrieveOptions[@]}" && runScript ipaws-extract &
      sleep "${retrieveInterval}"
   done
}

reviewAlerts() {
   local -r interval=$((60 * 60))
   local -r deviation=$((60 * 3))

   while sleep $((interval + ((RANDOM % (deviation * 2)) - deviation)))
   do
      runScript ipaws-review -R &
   done
}

awaitClients() {
   makeCommand ipaws-session
   ncat -l "${portNumber}" --max-conns "${maximumClients}" --keep-open --sh-exec "${command[*]}"
}

setLogLevel info
handleCommandArguments "c:d:egm:p:s:M:P:R:" "" "${@}"

[ -n "${configurationDirectory}" ] || configurationDirectory="${defaultConfigurationDirectory}"
verifyReadableDirectory "${configurationDirectory}"
logDebug "configuration-directory ${configurationDirectory}"
processConfigurationFile "${configurationDirectory}"

[ -n "${dataDirectory}" ] || dataDirectory="${defaultDataDirectory}"
verifyWritableDirectory "${dataDirectory}"
logDebug "data-directory ${dataDirectory}"

[ -n "${maximumClients}" ] || maximumClients="${defaultMaximumClients}"
verifyIntegerValue "${maximumClients}" "maximum clients" 1
logDebug "maximum-clients ${maximumClients}"

[ -n "${portNumber}" ] || portNumber="${defaultPortNumber}"
verifyIntegerValue "${portNumber}" "port number" 1024 65535
logDebug "port-number ${portNumber}"

[ -n "${retrieveInterval}" ] || retrieveInterval="${defaultRetrieveInterval}"
verifyIntegerValue "${retrieveInterval}" "retrieve interval" 15
logDebug "retrieve-interval ${retrieveInterval}"

attemptExclusiveLock lock server || semanticError "already running"
executeOnExit releaseLock "${lock}"

umask 022
exec 2> >(writeLog)

retrieveAlerts &
reviewAlerts &
awaitClients &
wait

exit 0
