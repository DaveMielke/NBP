#!/bin/bash
. "${0%/*}/prologue.sh"

readonly defaultMinutesBefore=30

showUsageSummary() {
cat <<END-OF-USAGE
Get current US IPAWS [Integrated Public Alert and Warning System] alerts.
Usage: ${0##*/} [-option ...]

The following options may be specified:
-c path        the configuration directory (default is ${defaultConfigurationDirectory})
-d path        the data directory (default is ${defaultDataDirectory})
-e             get EAS [Emergency Alert System] alerts
-g             get general (non-EAS) alerts
-h             show this usage summary on standard output and then exit
-m minutes     how much before the reference time to look (default is ${defaultMinutesBefore})
-p characters  the server access PIN
-t             access the test server
-v              show properties on standard error

Alert type options can be combined. If none are specified then all are assumed.

Alerts files are in the data directory and are named ${alertsFilePrefix}<time>.<extension>.
<time> is an ISO-8601 UTC timestamp (yyyy-mm-ddThh:mm:ssZ).
<extension> is .${alertsExtension} for retrieved alerts, .${errorExtension} for errors, and .${defaultExtension} otherwise.

The reference time used for alerts retrieval is taken from the name of the most
recent alerts file (.${alertsExtension}). If there aren't any then the current
time is used.
END-OF-USAGE
}

readonly alertsFilePrefix="IPAWS@"
readonly alertsExtension="xml"
readonly errorExtension="html"
readonly defaultExtension="txt"

readonly timeFormat="%Y-%m-%dT%H:%M:%SZ"
readonly timeGlob="[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]Z"

showProperties=false
configurationDirectory=""
dataDirectory=""
useTestServer=false
requestPIN=""
getGeneralAlerts=false
getEmergencyAlerts=false
minutesBefore=""

handleOption_c() {
   configurationDirectory="${OPTARG}"
}

handleOption_d() {
   dataDirectory="${OPTARG}"
}

handleOption_e() {
   getEmergencyAlerts=true
}

handleOption_g() {
   getGeneralAlerts=true
}

handleOption_m() {
   minutesBefore="${OPTARG}"
}

handleOption_p() {
   requestPIN="${OPTARG}"
}

handleOption_t() {
   useTestServer=true
}

handleOption_v() {
   showProperties=true
}

handleOptions "c:d:egm:p:tv" "${@}"

[ -n "${configurationDirectory}" ] || configurationDirectory="${defaultConfigurationDirectory}"
verifyReadableDirectory "${configurationDirectory}"

[ -n "${dataDirectory}" ] || dataDirectory="${defaultDataDirectory}"
verifyWritableDirectory "${dataDirectory}"

readonly currentTime="$(date -u +"${timeFormat}")"
"${showProperties}" && programMessage "current-time ${currentTime}"

readonly alertsFileList=( "${dataDirectory}/${alertsFilePrefix}"${timeGlob}".${alertsExtension}" )
readonly alertsFileCount="${#alertsFileList[*]}"

if [ "${alertsFileCount}" -gt 0 ]
then
   alertsTime="${alertsFileList[alertsFileCount-1]}"
   alertsTime="${alertsTime##*/}"
   alertsTime="${alertsTime#${alertsFilePrefix}}"
   alertsTime="${alertsTime%.*}"
else
   alertsTime="${currentTime}"
fi

readonly alertsTime
"${showProperties}" && programMessage "alerts-time ${alertsTime}"

requestURL="https://"
"${useTestServer}" && requestURL+="tdl."
requestURL+="apps.fema.gov/IPAWSOPEN_EAS_SERVICE/rest/"

readonly types=("" "eas" "public_non_eas" "public")
index=0
"${getEmergencyAlerts}" && let index+=1
"${getGeneralAlerts}" && let index+=2
(( index )) || index=3
type="${types[index]}"
[ -n "${type}" ] || semanticError "alert type combination not supported"
requestURL+="${type}"

[ -n "${minutesBefore}" ] || minutesBefore="${defaultMinutesBefore}"
[[ "${minutesBefore}" =~ ^[1-9][0-9]*$ ]] || syntaxError "invalid minutes before operand: ${minutesBefore}"
requestURL+="/recent/$(date -u -d "${alertsTime} -${minutesBefore} minutes" +"${timeFormat}")"

[ -z "${requestPIN}" ] && {
   pinFile="${configurationDirectory}/$("${useTestServer}" && echo "test" || echo "prod").pin"
   [ -f "${pinFile}" ] && [ -r "${pinFile}" ] && read <"${pinFile}" requestPIN || :
}

"${showProperties}" && programMessage "request-url ${requestURL}"
serverResponse=$(curl --silent --show-error --get --data-urlencode "pin=${requestPIN}" "${requestURL}") || exit "${?}"
[ -z "${serverResponse}" ] && responseError "no data received"
[ "${serverResponse}" = "${serverResponse#<}" ] && responseError "${serverResponse}"

alertsFile="${dataDirectory}/${alertsFilePrefix}${currentTime}."
if [ "${serverResponse}" != "${serverResponse#<?xml}" ]
then
   alertsFile+="${alertsExtension}"
elif [ "${serverResponse}" != "${serverResponse#<html}" ]
then
   alertsFile+="${errorExtension}"
else
   alertsFile+="${defaultExtension}"
fi

readonly alertsFile
"${showProperties}" && programMessage "alerts-file ${alertsFile}"
echo >"${alertsFile}" "${serverResponse}"

exit 0
