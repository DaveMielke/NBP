#!/bin/bash

. "${0%/*}/prologue.sh"
includeScriptLibraries command arguments strings

readonly defaultServerType="prod"
readonly defaultMinutesBefore=30

showUsageSummary() {
cat <<END-OF-USAGE
Get current US IPAWS [Integrated Public Alert and Warning System] alerts.
Usage: ${0##*/} [-option ...]

The following options may be specified:
-c path        the configuration directory (default is ${defaultConfigurationDirectory})
-d path        the data directory (default is ${defaultDataDirectory})
-e             get EAS [Emergency Alert System] alerts
-g             get general (non-EAS) alerts
-h             show this usage summary on standard output and then exit
-m minutes     how far before the reference time to look (default is ${defaultMinutesBefore})
-p characters  the server access PIN
-q             decrease verbosity
-v             increase verbosity
-D             use the demonstration server
-P             use the production server (this is the default)
-T             use the test server

Alert type options can be combined. If none are specified then all are assumed.
If more than one server option is specified then the last one is used.

Successfully retrieved alerts files are in the data directory. They're
named <time>.${alertsFileExtension}, where <time> is the ISO-8601 UTC timestamp
(yyyy-mm-ddThh:mm:ssZ) for when the file was retrieved.

The reference time used for alerts retrieval is the name of the most recently
retrieved alerts file (*.${alertsFileExtension}). If there aren't any then the current time
is used.

If the PIN isn't specified then it's read from *.pin in the configuration
directory, where * is the server type - one of: $(joinArrayValues serverTypes ", ")
END-OF-USAGE
}

readonly -A serverTypes=(
   ["demonstration"]="demo"
   ["production"]="prod"
   ["test"]="test"
)

readonly timeFormat="%Y-%m-%dT%H:%M:%SZ"
readonly timeGlob="[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]Z"

configurationDirectory=""
dataDirectory=""
serverType=""
requestPIN=""
getEmergencyAlerts=false
getGeneralAlerts=false
minutesBefore=""

handleOption_c() {
   configurationDirectory="${OPTARG}"
}

handleOption_d() {
   dataDirectory="${OPTARG}"
}

handleOption_e() {
   getEmergencyAlerts=true
}

handleOption_g() {
   getGeneralAlerts=true
}

handleOption_m() {
   minutesBefore="${OPTARG}"
}

handleOption_p() {
   requestPIN="${OPTARG}"
}

handleOption_D() {
   serverType="demo"
}

handleOption_P() {
   serverType="prod"
}

handleOption_T() {
   serverType="test"
}

handleOptions "c:d:egm:p:DPT" "${@}"

[ -n "${configurationDirectory}" ] || configurationDirectory="${defaultConfigurationDirectory}"
verifyReadableDirectory "${configurationDirectory}"
logInfo "configuration-directory ${configurationDirectory}"
processConfigurationFile "${configurationDirectory}"

[ -n "${dataDirectory}" ] || dataDirectory="${defaultDataDirectory}"
verifyWritableDirectory "${dataDirectory}"
logInfo "data-directory ${dataDirectory}"

readonly currentTime="$(date -u +"${timeFormat}")"
logInfo "current-time ${currentTime}"

readonly alertsFileList=( "${dataDirectory}/"${timeGlob}".${alertsFileExtension}" )
readonly alertsFileCount="${#alertsFileList[*]}"

if [ "${alertsFileCount}" -gt 0 ]
then
   alertsTime="${alertsFileList[alertsFileCount-1]}"
   alertsTime="${alertsTime##*/}"
   alertsTime="${alertsTime%.*}"
else
   alertsTime="${currentTime}"
fi

readonly alertsTime
logInfo "alerts-time ${alertsTime}"

[ -n "${serverType}" ] || serverType="${defaultServerType}"
logInfo "server-type ${serverType}"

serverName="${configuredProperties["${serverType}-server"]}"
[ -n "${serverName}" ] || semanticError "server type not supported: ${serverType}"
logInfo "server-name ${serverName}"

requestURL="https://${serverName}"
requestURL+="/IPAWSOPEN_EAS_SERVICE/rest/"

readonly types=("" "eas" "public_non_eas" "public")
index=0
"${getEmergencyAlerts}" && let index+=1
"${getGeneralAlerts}" && let index+=2
(( index )) || index=3
type="${types[index]}"
[ -n "${type}" ] || semanticError "alert type combination not supported"
requestURL+="${type}"

[ -n "${minutesBefore}" ] || minutesBefore="${defaultMinutesBefore}"
[[ "${minutesBefore}" =~ ^[1-9][0-9]*$ ]] || syntaxError "invalid minutes before operand: ${minutesBefore}"
requestURL+="/recent/$(date -u -d "${alertsTime} -${minutesBefore} minutes" +"${timeFormat}")"

[ -z "${requestPIN}" ] && {
   pinFile="${configurationDirectory}/${serverType}.pin"
   [ -f "${pinFile}" ] && [ -r "${pinFile}" ] && read <"${pinFile}" requestPIN || :
}

logInfo "request-url ${requestURL}"
serverResponse=$(curl --silent --show-error --get --data-urlencode "pin=${requestPIN}" "${requestURL}") || exit "${?}"
[ -z "${serverResponse}" ] && responseError "no data received"
[ "${serverResponse}" = "${serverResponse#<}" ] && responseError "${serverResponse}"

if [ "${serverResponse}" != "${serverResponse#<?xml}" ]
then
   readonly outputFileExtension="${alertsFileExtension}"
else
   readonly outputFileExtension="${failureFileExtension}"
fi

readonly outputFile="${dataDirectory}/${currentTime}.${outputFileExtension}"
logInfo "output-file ${outputFile##*/}"
echo >"${outputFile}" "${serverResponse}"

exit 0
