#!/bin/bash
. "${0%/*}/prologue.sh"

readonly defaultMinutesBefore=30

showUsageSummary() {
cat <<END-OF-USAGE
Get current US IPAWS [Integrated Public Alert and Warning System] alerts.
Usage: ${0##*/} [-option ...]

The following options may be specified:
-d path        the directory to be managed (${filePrefix}* files)
-e             get EAS [Emergency Alert System] alerts
-g             get general alerts
-h             show this usage summary on standard output and then exit
-m minutes     how much before the reference time to look (default is ${defaultMinutesBefore})
-p characters  the server access PIN
-t             access the test server
-v              show properties on standard error

Alert type options can be combined. If none are specified then all are assumed.

Managed files (see the -d option) are named ${filePrefix}<time>.<extension>.
<time> is an ISO-8601 UTC timestamp (yyyy-mm-ddThh:mm:ssZ).
<extension> is .${alertsExtension} for retrieved alerts, .${errorExtension} for errors, and .${defaultExtension} otherwise.

The reference time used for alert retrieval is taken from the name of the most
recent alerts file (.${alertsExtension}). If there aren't any, or if -d wasn't specified, then
the current time is used.
END-OF-USAGE
}

makeAlertFileList() {
   alertFileList=()

   [ -z "${managedDirectory}" ] || {
      [ -d "${managedDirectory}" ] || semanticError "not a directory: ${managedDirectory}"
      [ -x "${managedDirectory}" ] || semanticError "directory not searchable: ${managedDirectory}"
      [ -r "${managedDirectory}" ] || semanticError "directory not readable: ${managedDirectory}"
      [ -w "${managedDirectory}" ] || semanticError "directory not writable: ${managedDirectory}"
      alertFileList=( "${managedDirectory}/${filePrefix}"${timeGlob}".${alertsExtension}" )
   }

   readonly alertFileList
   readonly alertFileCount="${#alertFileList[*]}"
}

readonly filePrefix="IPAWS@"
readonly alertsExtension="xml"
readonly errorExtension="html"
readonly defaultExtension="txt"

readonly timeFormat="%Y-%m-%dT%H:%M:%SZ"
readonly timeGlob="[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]Z"

showProperties=false
managedDirectory=""
useTestServer=false
requestPIN="NHBwdWhvMmNmNjM"
getGeneralAlerts=false
getEmergencyAlerts=false
minutesBefore=""

handleOption_d() {
   managedDirectory="${OPTARG}"
}

handleOption_e() {
   getEmergencyAlerts=true
}

handleOption_g() {
   getGeneralAlerts=true
}

handleOption_m() {
   minutesBefore="${OPTARG}"
}

handleOption_p() {
   requestPIN="${OPTARG}"
}

handleOption_t() {
   useTestServer=true
}

handleOption_v() {
   showProperties=true
}

handleOptions "d:egm:p:tv" "${@}"

makeAlertFileList

if [ "${alertFileCount}" -gt 0 ]
then
   timeReference="${alertFileList[alertFileCount-1]}"
   timeReference="${timeReference##*/}"
   timeReference="${timeReference#${filePrefix}}"
   timeReference="${timeReference%.*}"
else
   timeReference="$(date -u +"${timeFormat}")"
fi

readonly timeReference
"${showProperties}" && programMessage "time ${timeReference}"

requestURL="https://"
"${useTestServer}" && requestURL+="tdl."
requestURL+="apps.fema.gov/IPAWSOPEN_EAS_SERVICE/rest/"

readonly types=("" "eas" "public_non_eas" "public")
index=0
"${getEmergencyAlerts}" && let index+=1
"${getGeneralAlerts}" && let index+=2
(( index )) || index=3
type="${types[index]}"
[ -n "${type}" ] || semanticError "alert type combination not supported"
requestURL+="${type}"

[ -n "${minutesBefore}" ] || minutesBefore="${defaultMinutesBefore}"
[[ "${minutesBefore}" =~ ^[1-9][0-9]*$ ]] || syntaxError "invalid minutes before operand: ${minutesBefore}"
requestURL+="/recent/$(date -u -d "${timeReference} -${minutesBefore} minutes" +"${timeFormat}")"

"${showProperties}" && programMessage "URL ${requestURL}"
serverResponse=$(curl --silent --show-error --get --data-urlencode "pin=${requestPIN}" "${requestURL}") || exit "${?}"
[ -z "${serverResponse}" ] && responseError "no data received"
[ "${serverResponse}" = "${serverResponse#<}" ] && responseError "${serverResponse}"

if [ -n "${managedDirectory}" ]
then
   outputFile="${managedDirectory}/${filePrefix}$(date -u +"${timeFormat}")."

   if [ "${serverResponse}" != "${serverResponse#<?xml}" ]
   then
      outputFile+="${alertsExtension}"
   elif [ "${serverResponse}" != "${serverResponse#<html}" ]
   then
      outputFile+="${errorExtension}"
   else
      outputFile+="${defaultExtension}"
   fi
else
   outputFile="/dev/stdout"
fi

readonly outputFile
"${showProperties}" && programMessage "file ${outputFile}"

echo >"${outputFile}" "${serverResponse}"
exit 0
