verifyCommandAvailability sqlite3

readonly sqlDatabaseFile="sqlite.db"
readonly sqlConfigurationFile="sqlite.conf"

sqlMakeCommand() {
   sqlCommand=(sqlite3 -init "${configurationDirectory}/${sqlConfigurationFile}" "${@}" "${dataDirectory}/${sqlDatabaseFile}")
} && readonly -f sqlMakeCommand

sqlExecute() {
   local command="${1}"

   sqlMakeCommand -batch -separator ,
   "${sqlCommand[@]}" <<<"${command}"
} && readonly -f sqlExecute

sqlBegin() {
   [ -n "${sqlTransaction}" ] && internalError "SQL transaction already started: ${sqlTransaction}"
   sqlTransaction="begin exclusive transaction;"
} && readonly -f sqlBegin

sqlAppend() {
   [ -n "${sqlTransaction}" ] || internalError "SQL transaction not started"
   sqlTransaction+=" ${1}"
} && readonly -f sqlAppend

sqlEnd() {
   sqlAppend " end transaction;"
   logDebug "SQL transaction: ${sqlTransaction}"
   sqlExecute "${sqlTransaction}"
   sqlTransaction=""
} && readonly -f sqlEnd

sqlEvaluate() {
   local -n sqlEvaluate_response="${1}"
   local sqlEvaluate_command="${2}"

   sqlMakeCommand -batch -line
   sqlCommand+=("${sqlEvaluate_command}")

   local sqlEvaluate_count=0 sqlEvaluate_found=false
   local sqlEvaluate_field sqlEvaluate_equals sqlEvaluate_value

   while read -r sqlEvaluate_field sqlEvaluate_equals sqlEvaluate_value
   do
      [ -z "${sqlEvaluate_field}" ] && {
         sqlEvaluate_found=false
         continue
      }

      "${sqlEvaluate_found}" || {
         sqlEvaluate_found=true
         let sqlEvaluate_count+=1
      }

      [ "${sqlEvaluate_equals}" = "=" ] || continue
      sqlEvaluate_response["${sqlEvaluate_count},${sqlEvaluate_field}"]="${sqlEvaluate_value}"
   done < <("${sqlCommand[@]}")

   sqlEvaluate_response["count"]="${sqlEvaluate_count}"
} && readonly -f sqlEvaluate

sqlCount() {
   local -n sqlCount_result="${1}"
   local sqlCount_table="${2}"
   local sqlCount_where="${3}"
   local sqlCount_limit="${4}"

   local sqlCount_command="select count(*) as count from ${sqlCount_table}"
   [ -n "${sqlCount_where}" ] && sqlCount_command+=" where ${sqlCount_where}"
   [ -n "${sqlCount_limit}" ] && sqlCount_command+=" limit ${sqlCount_limit}"
   sqlCount_command+=";"

   local -A sqlCount_response
   sqlEvaluate sqlCount_response "${sqlCount_command}"
   sqlCount_result="${sqlCount_response["1,count"]}"
} && readonly -f sqlCount

sqlHave() {
   local sqlHave_table="${1}"
   local sqlHave_where="${2}"

   local sqlHave_count
   sqlCount sqlHave_count "${sqlHave_table}" "${sqlHave_where}" 1
   return $((!sqlHave_count))
} && readonly -f sqlHave

sqlHaveColumn() {
   local table="${1}"
   local column="${2}"

   sqlHave "pragma_table_info('${table}')" "name = '${column}'" || return "${?}"
} && readonly -f sqlHaveColumn

sqlEnsureColumn() {
   local table="${1}"
   local column="${2}"
   local description="${3}"

   sqlHaveColumn "${table}" "${column}" || {
      sqlBegin
      sqlAppend "alter table ${table} add column ${column} ${description};"
      sqlEnd
   }
} && readonly -f sqlEnsureColumn

