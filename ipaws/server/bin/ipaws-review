#!/bin/bash

. "${0%/*}/prologue.sh"
includeScriptLibraries command arguments locks filter

addCommandOption c configurationDirectory path "the configuration directory" "${defaultConfigurationDirectory}"
addCommandOption d dataDirectory path "the data directory" "${defaultDataDirectory}"
addCommandOption R removeFiles flag "remove the files that are rejected by the filter"

showCommandUsageSummary() {
cat <<END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY

If no alert files are specified then all of them are analyzed.
END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY
}

handlePositionalCommandArguments() {
   alertFiles=("${@}")
}

handleCommandArguments "[alert-file ...]" "${@}"

verifyReadableDirectory "${configurationDirectory}"
logDebug "configuration-directory ${configurationDirectory}"
processCommandConfigurationFile "${configurationDirectory}"

verifyWritableDirectory "${dataDirectory}"
logDebug "data-directory ${dataDirectory}"

attemptExclusiveLock lock review || semanticError "already running"
executeOnExit releaseLock "${lock}"

[ "${#alertFiles[*]}" -gt 0 ] || {
   cd "${dataDirectory}"
   alertFiles=( $(ls -1 -r --sort=time *".${alertFileExtension}") )
}

acceptCount=0
rejectCount=0
skipCount="${#alertFiles[*]}"

for file in "${alertFiles[@]}"
do
   [ -e "${file}" ] || {
      logWarning "file not found: ${file}"
      continue
   }

   [ -f "${file}" ] || {
      logWarning "not a file: ${file}"
      continue
   }

   [ -r "${file}" ] || {
      logWarning "file not readable: ${file}"
      continue
   }

   if acceptAlert "${file}" "${removeFiles}"
   then
      let acceptCount+=1
   else
      let rejectCount+=1

      "${removeFiles}" && {
         logInfo "removing alert file: ${file}"
         rm -f -- "${file}"
      }
   fi

   let skipCount-=1 || :
done

logInfo "summary: Accept:${acceptCount} Reject:${rejectCount} Skip:${skipCount}"
exit 0
