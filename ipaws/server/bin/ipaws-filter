#!/bin/bash

. "${0%/*}/prologue.sh"
includeScriptLibraries command arguments xml time

showCommandSpecificOptionsUsageSummary() {
cat <<END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY
-c path        the configuration directory (default is ${defaultConfigurationDirectory})
-d path        the data directory (default is ${defaultDataDirectory})
-r             remove the files that are rejected by the filter

If no alert files are specified then all of them are analyzed.
END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY
}

rejectAlert() {
   local file="${1}"

   local expiryTime="$(xpathGet "${file}" "/alert/info/expires/text()")"
   [ -n "${expiryTime}" ] || {
      logWarning "no expiry time: ${file}"
      return 1
   }

   local expirySeconds="$(epochSeconds "${expiryTime}")"
   [ "${expirySeconds}" -lt "${currentSeconds}" ] && {
      logInfo "alert file has expired: ${file}: ${expiryTime}"
      return 0
   }

   return 1
}

configurationDirectory=""
dataDirectory=""
removeFiles=false

handleCommandOption_c() {
   configurationDirectory="${OPTARG}"
}

handleCommandOption_d() {
   dataDirectory="${OPTARG}"
}

handleCommandOption_r() {
   removeFiles=true
}

handlePositionalCommandArguments() {
   alertFiles=("${@}")
}

handleCommandArguments "c:d:r" "[alert-file ...]" "${@}"

[ -n "${configurationDirectory}" ] || configurationDirectory="${defaultConfigurationDirectory}"
verifyReadableDirectory "${configurationDirectory}"
logDebug "configuration-directory ${configurationDirectory}"
processConfigurationFile "${configurationDirectory}"

[ -n "${dataDirectory}" ] || dataDirectory="${defaultDataDirectory}"
verifyWritableDirectory "${dataDirectory}"
logDebug "data-directory ${dataDirectory}"

readonly currentTime="$(utcTime)"
logDebug "current-time ${currentTime}"
readonly currentSeconds="$(epochSeconds "${currentTime}")"

[ "${#alertFiles[*]}" -gt 0 ] || {
   cd "${dataDirectory}"
   alertFiles=(*".${alertFileExtension}")
}

readonly fileCount="${#alertFiles[*]}"
rejectCount=0

for file in "${alertFiles[@]}"
do
   [ -e "${file}" ] || {
      logWarning "file not found: ${file}"
      continue
   }

   [ -f "${file}" ] || {
      logWarning "not a file: ${file}"
      continue
   }

   [ -r "${file}" ] || {
      logWarning "file not readable: ${file}"
      continue
   }

   [ "$(xpathGet "${file}" "count(/alert)")" -eq "1" ] || {
      logWarning "not an alert: ${file}"
      continue
   }

   rejectAlert "${file}" && {
      let rejectCount+=1

      "${removeFiles}" && {
         logInfo "removing alert file: ${file}"
         rm "${file}"
      }
   }
done

logInfo "alert files rejected: ${rejectCount} of ${fileCount}"
exit 0
