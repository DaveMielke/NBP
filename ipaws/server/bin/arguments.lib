verifyCommandAvailability column

verifyIntegerValue() {
   local value="${1}"
   local description="${2}"
   local minimum="${3}"
   local maximum="${4}"

   description+=" value"
   [[ "${value}" =~ ^(0|-?[1-9][0-9]*)$ ]] || syntaxError "invalid ${description}: ${value}"
   [ -n "${minimum}" ] && [ "${value}" -lt "${minimum}" ] && semanticError "${description} less than ${minimum}: ${value}"
   [ -n "${maximum}" ] && [ "${value}" -gt "${maximum}" ] && semanticError "${description} greater than ${maximum}: ${value}"
   return 0
} && readonly -f verifyIntegerValue

verifyReadableDirectory() {
   local path="${1}"

   [ -d "${path}" ] || semanticError "not a directory: ${path}"
   [ -x "${path}" ] || semanticError "directory not searchable: ${path}"
   [ -r "${path}" ] || semanticError "directory not readable: ${path}"
} && readonly -f verifyReadableDirectory

verifyWritableDirectory() {
   local path="${1}"

   verifyReadableDirectory "${path}"
   [ -w "${path}" ] || semanticError "directory not writable: ${path}"
} && readonly -f verifyWritableDirectory

commandOptionCharacters=""
declare -g -A commandOptionDefaults=()
declare -g -A commandOptionOperands=()
declare -g -A commandOptionSummaries=()
declare -g -A commandOptionTypes=()
declare -g -A commandOptionVariables=()

addCommandOption() {
   local option="${1}"
   local variable="${2}"
   local type="${3}"
   local summary="${4}"
   local default="${5}"
   local operand=""

   [ -n "${option}" ] || internalError "option character not specified"
   [ "${#option}" -eq 1 ] && [ "${option}" != "${option#*[a-zA-Z0-9]}" ] || internalError "invalid option character: ${option}"
   [ -n "${commandOptionTypes[${option}]}" ] && internalError "option already defined: -${option}"

   [ -n "${variable}" ] || internalError "option variable not specified: -${option}"
   [ -n "${type}" ] || internalError "option type not specified: -${option}"
   [ -n "${summary}" ] || internalError "option summary not specified: -${option}"

   if [[ "${type}" =~ ^flag|increment|decrement$ ]]
   then
      [ -n "${default}" ] && internalError "default value not allowed: -${option}"
   else
      operand="${type}"
      type="string"
   fi

   commandOptionDefaults[${option}]="${default}"
   commandOptionOperands[${option}]="${operand}"
   commandOptionSummaries[${option}]="${summary}"
   commandOptionTypes[${option}]="${type}"
   commandOptionVariables[${option}]="${variable}"
   commandOptionCharacters+="${option} "
} && readonly -f addCommandOption

addCommandOption h usageSummaryRequested flag "show this usage summary on standard output and then eixt"
addCommandOption q logLevelAdjustment increment "decrease logging verbosity"
addCommandOption v logLevelAdjustment decrement "increase logging verbosity"

handleCommandArguments() {
   local positional="${1}"
   shift 1

   local usageSummaryRequested logLevelAdjustment
   local optionsString=":"
   local option

   [ -n "${commandOptionCharacters}" ] && {
      for option in ${commandOptionCharacters}
      do
         local operand="${commandOptionOperands[${option}]}"
         local type="${commandOptionTypes[${option}]}"
         local variable="${commandOptionVariables[${option}]}"

         optionsString+="${option}"
         [ -n "${operand}" ] && optionsString+=":"
         "initializeCommandOption_${type}" "${variable}"
      done
   }

   while getopts "${optionsString}" option
   do
      case "${option}"
      in
         :) syntaxError "missing operand: -${OPTARG}";;
        \?) syntaxError "unrecognized option: -${OPTARG}";;
         *) 
            local type="${commandOptionTypes[${option}]}"
            local variable="${commandOptionVariables[${option}]}"
            "handleCommandOption_${type}" "${variable}"
            ;;
      esac
   done

   "${usageSummaryRequested}" && {
      local usage="Usage: ${programName}"
      [ -n "${optionsString}" ] && usage+=" [-option ...]"
      [ -n "${positional}" ] && usage+=" ${positional}"
      echo "${usage}"

      showOptionalCommandArgumentsSummary
      showCommandUsageSummary
      exit 0
   }

   shift $((OPTIND - 1))
   handlePositionalCommandArguments "${@}"

   [ -n "${commandOptionCharacters}" ] && {
      for option in ${commandOptionCharacters}
      do
         local variable="${commandOptionVariables[${option}]}"

         [ -n "${!variable}" ] || {
            local default="${commandOptionDefaults[${option}]}"
            [ -n "${default}" ] && setVariable "${variable}" "${default}"
         }
      done
   }

   let IPAWS_LOG_LEVEL+=logLevelAdjustment || :
} && readonly -f handleCommandArguments

initializeCommandOption_flag() {
   setVariable "${1}" false
} && readonly -f initializeCommandOption_flag

initializeCommandOption_increment() {
   setVariable "${1}" 0
} && readonly -f initializeCommandOption_increment

initializeCommandOption_decrement() {
   setVariable "${1}" 0
} && readonly -f initializeCommandOption_decrement

initializeCommandOption_string() {
   setVariable "${1}" ""
} && readonly -f initializeCommandOption_string

handleCommandOption_flag() {
   setVariable "${1}" true
} && readonly -f handleCommandOption_flag

handleCommandOption_increment() {
   setVariable "${1}" $(( ${!1} + 1 ))
} && readonly -f handleCommandOption_increment

handleCommandOption_decrement() {
   setVariable "${1}" $(( ${!1} - 1 ))
} && readonly -f handleCommandOption_decrement

handleCommandOption_string() {
   setVariable "${1}" "${OPTARG}"
} && readonly -f handleCommandOption_string

showOptionalCommandArgumentsSummary() {
   [ -n "${commandOptionCharacters}" ] && {
      echo -e "\nThe following options may be specified:"

      local delimiter="|"
      local option

      for option in $(echo "${commandOptionCharacters}" | tr " " $'\n' | sort)
      do
         local operand="${commandOptionOperands[${option}]}"
         local summary="${commandOptionSummaries[${option}]}"

         local default="${commandOptionDefaults[${option}]}"
         [ -n "${default}" ] && summary+=" (default is ${default}"

         echo "-${option}${delimiter}${operand}${delimiter}${summary}"
      done | column -s "${delimiter}" -t -d -N option,operand,summary -W summary
   }
} && readonly -f showOptionalCommandArgumentsSummary

showCommandUsageSummary() {
   :
}

verifyNoMorePositionalArguments() {
   [ "${#}" -eq 0 ] || syntaxError "too many positional arguments: ${*}"
} && readonly -f verifyNoMorePositionalArguments

handlePositionalCommandArguments() {
   verifyNoMorePositionalArguments "${@}"
}

