#!/bin/bash

. "${0%/*}/prologue.sh"
verifyCommandAvailability column
requireScriptLibraries command arguments options-common sql

handlePositionalCommandArguments() {
  positionalArguments=("${@}")
}

databaseFunction_sessions() {
   verifyNoMorePositionalArguments "${@}"

   databaseCommand="
      select
         serial as 'Serial Number',
         model as 'Model',
         api as 'API',
         datetime(started, 'localtime') as 'Started at'
         from current_sessions
      order by started
      ;
   "

   columnCommand+=(-N "Serial Number,Model,API,Started at" -R "API")
}

databaseFunction_areas() {
   [ "${#}" -ge 1 ] || syntaxError "missing serial number"
   local serialNumber="${1}"
   shift 1

   verifyNoMorePositionalArguments "${@}"

   "${programDirectory}/states-import"
   "${programDirectory}/counties-import"

   databaseCommand="
      select
         counties.SAME as 'SAME',
         name || ', ' || state as 'Name'
         from counties
              inner join requested_areas
                 on requested_areas.SAME = counties.SAME
              inner join current_sessions
                 on current_sessions.client = requested_areas.client
         where serial = '${serialNumber}'
         union
      select
         '0' || states.SAME || '000' as 'SAME',
         name
         from states
              inner join requested_areas
                 on requested_areas.SAME = states.SAME
              inner join current_sessions
                 on current_sessions.client = requested_areas.client
         where serial = '${serialNumber}'
      order by name
      ;
   "

   columnCommand+=(-N "SAME,Name")
}

handleCommandArguments "[function [argument ...]]" "${@}"
prepareCommonCommandOptions

if [ "${#positionalArguments[@]}" -eq 0 ]
then
   sqlMakeCommand
   "${sqlCommand[@]}"
else
   functionName="${positionalArguments[0]}"
   unset "positionalArguments[0]"

   shellFunction="databaseFunction_${functionName}"
   [ "$(type -t "${shellFunction}")" = "function" ] || syntaxError "unknown function: ${functionName}"

   columnCommand=(column -s "|" -t)
   "${shellFunction}" "${positionalArguments[@]}"

   sqlMakeCommand -batch -list
   "${sqlCommand[@]}" "${databaseCommand}" | "${columnCommand[@]}"
fi

exit "${?}"
