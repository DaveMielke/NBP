#!/bin/bash

. "${0%/*}/prologue.sh"
verifyCommandAvailability flock
requireScriptLibraries arguments options-common

showCommandUsageSummary() {
cat <<END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY
END-OF-COMMAND-SPECIFIC-OPTIONS-USAGE-SUMMARY
}

handlePositionalCommandArguments() {
   [ "${#}" -ge 1 ] || syntaxError "missing server type"
   serverType="${1}"
   shift 1

   serverScriptlet="${programDirectory}/${serverType}.srv"
   [ -f "${serverScriptlet}" ] || syntaxError "unknown server type: ${serverType}"

   [ "${#}" -eq 0 ] || syntaxError "too many positional arguments"
}

handleClientCommands() {
   local -a arguments

   while read -r -a arguments
   do
      logInfo "received command: ${clientReference}: ${arguments[*]}"
      [ "${#arguments[*]}" -eq 0 ] && continue

      local command="${arguments[0]}"
      unset "arguments[0]"
      [ "${command}" = "end" ] && return 0
      local scriptlet="${programDirectory}/${serverType}-${command}.cmd"

      if [ -f "${scriptlet}" ]
      then
         . "${scriptlet}"
         "${serverType}Command_${command}" "${arguments[@]}" || :
      else
         logWarning "unrecognized command: ${clientReference}: ${command}"
      fi
   done
}

beginClientResponse() {
   exec {clientResponseLock}>> "/dev/stdout"
   flock -e "${clientResponseLock}"
}

endClientResponse() {
   flock -u "${clientResponseLock}"
   exec {clientResponseLock}>&-
   unset clientResponseLock
}

writeClientResponse() {
   local response="${1}"

   beginClientResponse
   writeClientCommand "${response}"
   endClientResponse
}

writeClientCommand() {
   local command="${1}"

   logInfo "sending command: ${clientReference}: ${command}"
   echo "${command}"
}

handleCommandArguments "server-type" "${@}"
prepareCommonCommandOptions

clientReference="[${NCAT_REMOTE_ADDR}]:${NCAT_REMOTE_PORT}/${NCAT_PROTO}"
logInfo "connected: ${clientReference}"
pushOnExitCommand logInfo "disconnected: ${clientReference}"

. "${serverScriptlet}"
beginServerSession
pushOnExitCommand endServerSession

pushOnExitCommand logInfo "disconnecting: ${clientReference}"
handleClientCommands
exit 0
