#!/bin/bash

. "${0%/*}/prologue.sh"
requireScriptLibraries command arguments options-common alerts cap xml filter

extractAlerts() {
   waitIfAlreadyRunning
   local temporaryFile="${alertFileExtension}.extracted"

   while :
   do
      set -- *.${alertsFileExtension}
      [ "${#}" -eq 0 ] && break
      local alertsFile

      for alertsFile
      do
         local alertsName="${alertsFile%.*}"
         logInfo "processing alert set: ${alertsName}"

         local alertCount="$(capGetAlertCount "${alertsFile}")"
         local duplicateCount=0
         local acceptCount=0
         local rejectCount=0

         [ -n "${alertCount}" ] && {
            local alertNumber=0

            while (( (alertNumber += 1) <= alertCount ))
            do
               capGetAlertElement "${alertsFile}" "${alertNumber}" >"${temporaryFile}"
               echo "" >>"${temporaryFile}"

               local alertIdentifier="$(xmlEvaluate "${temporaryFile}" "/alert/identifier/text()")"
               local alertFile="${alertIdentifier}.${alertFileExtension}"

               if [ -e "${alertFile}" ]
               then
                  let duplicateCount+=1
               else
                  logInfo "new alert: ${alertIdentifier}"

                  capCacheAlertProperties "${temporaryFile}" &&
                  acceptAlert "${temporaryFile}" true &&
                  capCacheAlertAreas "${temporaryFile}" &&
                  {
                     logInfo "alert accepted: ${alertIdentifier}"
                     let acceptCount+=1

                     mv -- "${temporaryFile}" "${alertFile}"
                     chmod -- a-w "${alertFile}"

                     continue
                  }

                  logInfo "alert rejected: ${alertIdentifier}"
                  let rejectCount+=1
               fi

               rm -- "${temporaryFile}"
            done
         }

         logInfo "alert set summary: ${alertsName}: Acc:${acceptCount} Rej:${rejectCount} Dup:${duplicateCount}"
         rm -f -- "${alertsFile}"
      done
   done
}

handleCommandArguments "" "${@}"
prepareCommonCommandOptions

cd "${dataDirectory}"
extractAlerts
logDebug "done"
exit 0
